<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.sist.b.post.PostRepository">
  
  <!-- post upload -->
  	<insert id="setPostUpload" parameterType="PostVO" useGeneratedKeys="true" keyProperty="postNum">
  		INSERT INTO 
  				post
  		VALUES
  				(#{postNum}, #{userNum}, #{contents}, #{tag, jdbcType=VARCHAR}, now(), 0)
  	</insert>
  	
  <!-- post List -->	
	
	<resultMap type="PostVO" id="selectResult">
		<id column="postNum" property="postNum"/>
		<result column="userNum" property="userNum"/>
		<result column="contents" property="contents"/>
		<result column="tag" property="tag"/>
		<result column="regDate" property="regDate"/>
		<result column="likes" property="likes"/>
		
		<association property="userVO" javaType="UserVO">
			<id column="userNum" property="userNum"/>
			<result column="nickname" property="nickname"/>
			<result column="fileName" property="fileName"/>
			<result column="username" property="username"/>
		</association>
		
		<association property="likesVO" javaType="LikesVO">
			<result column="likesNum" property="likesNum"/>
			<result column="postNum" property="postNum"/>
			<result column="userNum" property="userNum"/>
			<result column="count" property="count"/>
		
		</association>
		
		<association property="bookmarkVO" javaType="BookmarkVO">
			<result column="bookmarkNum" property="bookmarkNum"/>
			<result column="postNum" property="postNum"/>
			<result column="userNum" property="userNum"/>
			<result column="chk" property="chk"/>		
		 </association>
		
		<collection property="fileList" javaType="List" ofType="PostFilesVO">
			<id column="fileNum" property="fileNum"/>
			<result column="postNum" property="postNum"/>
			<result column="postfileName" property="postfileName"/>
			<result column="oriName" property="oriName"/>
		</collection>
		
		<collection property="commentList" javaType="List" ofType="CommentVO">
			<id column="commentNum" property="commentNum"/>
			<result column="writer" property="writer"/>
			<result column="commentContents" property="commentContents"/>
			<result column="postNum" property="postNum"/>
			<result column="userNum" property="userNum"/>
			<result column="regDate" property="regDate"/>
		</collection>
		
	
	</resultMap>
	
		<select id="getPostList" parameterType="UserVO" resultMap="selectResult">
  		SELECT * 
  		FROM post P
  		
  		LEFT JOIN user U
  		ON(P.userNum = U.userNum)
  		
  		LEFT JOIN likes L
  		ON(P.postNum = L.postNum)
        
        LEFT JOIN bookmark B
        ON(P.postNum = B.postNum)
  		
  		LEFT JOIN postfiles PF
  		ON(P.postNum = PF.postNum)
  		
  		LEFT JOIN
  		(select postNum, count(*) count
 		from likes
 		where userNum = #{userNum}
        group by postNum)cnt
        ON(P.postNum = cnt.postNum) 
        
        LEFT JOIN
  		(select postNum, count(*) chk
 		from bookmark
 		where userNum = #{userNum}
        group by postNum)chk
        ON(P.postNum = chk.postNum) 
        
        where U.userNum in (select followNum from follow where userNum=#{userNum}) 
  		
  		ORDER BY P.postNum DESC
  	</select>
  	
  	<select id="getAllList" parameterType="UserVO" resultMap="selectResult">
  		SELECT * 
  		FROM post P
  		
  		LEFT JOIN user U
  		ON(P.userNum = U.userNum)
  		
  		LEFT JOIN likes L
  		ON(P.postNum = L.postNum)
        
        LEFT JOIN bookmark B
        ON(P.postNum = B.postNum)
  		
  		LEFT JOIN postfiles PF
  		ON(P.postNum = PF.postNum)
  		
  		LEFT JOIN
  		(select postNum, count(*) count
 		from likes
 		where userNum = #{userNum}
        group by postNum)cnt
        ON(P.postNum = cnt.postNum) 
        
        LEFT JOIN
  		(select postNum, count(*) chk
 		from bookmark
 		where userNum = #{userNum}
        group by postNum)chk
        ON(P.postNum = chk.postNum)
		
  		ORDER BY P.postNum DESC
  	</select>
  	
  	
  <!-- select post -->
  	<select id="getUserPost" parameterType="PostVO" resultMap="selectResult">
  		SELECT * 
  		FROM post P
  		
  		LEFT JOIN user U
  		ON(P.userNum = U.userNum)
  		
  		LEFT JOIN likes L
  		ON(P.postNum = L.postNum)
        
        LEFT JOIN bookmark B
        ON(P.postNum = B.postNum)
  		
  		LEFT JOIN postfiles PF
  		ON(P.postNum = PF.postNum)
  		
  		LEFT JOIN
  		(select postNum, count(*) count
 		from likes
 		where userNum = #{userNum}
        group by postNum)cnt
        ON(P.postNum = cnt.postNum) 
        
        LEFT JOIN
  		(select postNum, count(*) chk
 		from bookmark
 		where userNum = #{userNum}
        group by postNum)chk
        ON(P.postNum = chk.postNum) 
        
        left join comment C ON(P.postNum = C.postNum)
        
  		WHERE P.postNum = #{postNum}
  		
  		ORDER BY ref DESC, step asc, commentNum desc
  	
  	</select>
  
  	<!-- delete post -->
  	<delete id="setDeletePost" parameterType="PostVO">
  		DELETE
  		FROM post
  		WHERE postNum = #{postNum}
  	</delete>
  	
  
  <!-- file upload -->
  	<insert id="setFilesInsert" parameterType="PostFilesVO">
  		INSERT INTO postFiles
  		VALUES (null, #{postNum}, #{postfileName}, #{oriName})
  	</insert>
  	
  	<!-- bookmark list -->
  	
  	<select id="getBookmarkList" parameterType="PostVO" resultMap="selectResult">
  		<![CDATA[select P.*, PF.*, B.* from post P 
  		left join postfiles PF on(p.postNum = pf.postNum) 
  		left join bookmark B on(P.postNum = B.postNum) 
  		where B.userNum = #{userNum} and bookmarkNum > 0;
  	]]>
  	</select>
  	
  	<!-- search tag -->
  	
  	<select id="getSearchTagCount" parameterType="PostVO" resultType="Long">
  		SELECT count(*) FROM post
  		WHERE tag LIKE concat('%', #{tag},'%')
  		
  	</select>
  	
  	<select id="getTagList" parameterType="PostVO" resultMap="selectResult">
  		SELECT * FROM post
  		LEFT JOIN postfiles
  		USING(postNum)
  		WHERE tag LIKE concat('%', #{tag},'%')
  	</select>
  	
  	<!--  post -->
  	  
  	  <select id="getUserProfile" parameterType="PostVO" resultMap="selectResult">
  		SELECT * FROM post
  		LEFT JOIN postfiles 
  		USING(postNum)
  		WHERE userNum = #{userNum}
  		ORDER BY postNum DESC
  	</select>
  	
  	<!-- post num으로 user num 조회 -->
  	<select id="getUserNum" parameterType="Long" resultType="Long">
  		SELECT userNum FROM post WHERE postNum = #{postNum}
  	</select>
  </mapper>