<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.sist.b.user.UserRepository">
  	<insert id="setSignup" parameterType="UserVO" useGeneratedKeys="true" keyProperty="userNum">
  		insert into user (userNum, phone, email, nickname, username, password, fileName,enabled) 
  		values (#{userNum}, #{phone}, #{email}, #{nickname}, #{username}, #{password}, 'user.jpg',0)
  	</insert>
  	
  	<insert id="setRoleInsert" parameterType="Map">
  		insert into user_role (userNum, roleNum) 
  		values (#{userNum}, #{roleNum})
  	</insert>
  	
  	<select id="getLogin" parameterType="String" resultMap="getLoginResult">
  		select U.*, R.* from user U 
  			inner join user_role UR 
			on U.userNum = UR.userNum 
			inner join role R 
			on UR.roleNum = R.roleNum 
		where U.username=#{username} 
		and U.userNum not in (select userNum from suspend)
  	</select>
  	
  	<resultMap type="UserVO" id="getLoginResult">
  		<id column="userNum" property="userNum"/>
  		<result column="email" property="email"/>
  		<result column="nickname" property="nickname"/>
  		<result column="username" property="username"/>
  		<result column="password" property="password"/>
  		<result column="fileName" property="fileName"/>
  		<result column="enabled" property="enabled"/>
  		<collection property="roles" javaType="List" ofType="RoleVO">
  			<result column="roleNum" property="roleNum"/>
  			<result column="roleName" property="roleName"/>
  		</collection>
  	</resultMap>
  	
 	<select id="getSelectOne" parameterType="String" resultType="UserVO">
 		select * from user where username=#{username}
 	</select>
 	
 	<select id="getUserInfo" parameterType="Long" resultType="UserVO">
 		SELECT * FROM USER WHERE USERNUM = ${userNum}
 	</select>
 	
 	<update id="setUpdate" parameterType="UserVO">
 		update user set phone=#{phone}, email=#{email}, nickname=#{nickname}, website=#{website}, introduction=#{introduction} 
 		where userNum=#{username}
 	</update>
 	
 	<select id="getIdCheck" parameterType="UserVO" resultType="UserVO">
 		select * from user where username=#{username}
 	</select>
 	
 	<update id="setFileUpdate" parameterType="UserVO">
 		update user set fileName=#{fileName} where username=#{username}
 	</update>
 	
 	<update id="setFileDelte" parameterType="UserVO">
 		update user set fileName='user.jpg' where username=#{username}
 	</update>
 	
 	<update id="setPasswordUpdate" parameterType="UserVO">
 		update user set password=#{password} where username=#{username}
 	</update>
 	
 	<delete id="setDelete" parameterType="UserVO">
 		delete from user where username=#{username} and password=#{password}
 	</delete>
 	
 	<update id="setDeleteTemporary" parameterType="UserVO">
 		update user set enabled=0 where username=#{username}
 	</update>
 	
 	<update id="setEnabledInsert" parameterType="UserVO">
 		update user set enabled=1 where username=#{username}
 	</update>
 	
 	<insert id="setLoginLog" parameterType="UserVO">
 		insert into userlog (userlogNum, userNum, loginDate) 
 		values (null, #{userNum}, now());
 	</insert>

 	<update id="setUnenabled" parameterType="UserVO">
 		update user set enabled = 0
		where userNum = #{userNum}
 	</update>
 	
 	<update id="setEnabled" parameterType="UserVO">
 		update user set enabled = 1
		where userNum = #{userNum}
 	</update>
 	
 	<update id="getAuthkey" parameterType="Map">
 		update user set authkey=#{authkey} where username=#{username}
 	</update>

	<select id="getSearchUser" resultType="UserVO" parameterType="String">
		SELECT userNum, nickName, username, fileName FROM USER
		WHERE username LIKE CONCAT('%', #{searchText}, '%')
	</select>
	
	<insert id="setLoginlog" parameterType="UserlogVO">
		insert into userlog (userlogNum, userNum, loginDate, loginIp,loginCheck) 
		values (null, #{userNum}, now(), #{loginIp},1);
	</insert>
	
	<update id="setLogoutlog" parameterType="UserlogVO">
		update userlog set loginCheck=0 where userlogNum = #{userlogNum}
	</update>
	
	<select id="getUserlog" parameterType="UserVO" resultType="userlogVO">
		select * from userlog where userNum=#{userNum} order by userlogNum desc;
	</select>
	
	<select id="getUserlogRecent" parameterType="UserVO" resultType="Long">
		select userlogNum from userlog where userNum=#{userNum} order by userlogNum desc limit 1;
	</select>
	
	<delete id="setLogDelete" parameterType="UserlogVO">
		delete from userlog where userlogNum=#{userlogNum}
	</delete>

  </mapper>
  
 